<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="39" tokens="172">
<file line="1520" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="1630" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                                "in epilog expected ignorable content and not "+printable(ch),
                                this, null);
                        }
                    } else if(isS(ch)) {
                        gotS = true;
                        if(normalizeIgnorableWS) {
                            if(ch == '\r') {
                                normalizedCR = true;
                                //posEnd = pos -1;
                                //joinPC();
                                // posEnd is already set
                                if(!usePC) {
                                    posEnd = pos -1;
                                    if(posEnd > posStart) {
                                        joinPC();
                                    } else {
                                        usePC = true;
                                        pcStart = pcEnd = 0;
                                    }
                                }
                                //assert usePC == true;
                                if(pcEnd >= pc.length) ensurePC(pcEnd);
                                pc[pcEnd++] = '\n';
                            } else if(ch == '\n') {
                                if(!normalizedCR && usePC) {
                                    if(pcEnd >= pc.length) ensurePC(pcEnd);
                                    pc[pcEnd++] = '\n';
                                }
                                normalizedCR = false;
                            } else {
                                if(usePC) {
                                    if(pcEnd >= pc.length) ensurePC(pcEnd);
                                    pc[pcEnd++] = ch;
                                }
                                normalizedCR = false;
                            }
                        }
                    } else {
                        throw new XmlPullParserException(
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="144">
<file line="2411" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2530" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                    seenQ = false;
                }
                if(normalizeIgnorableWS) {
                    if(ch == '\r') {
                        normalizedCR = true;
                        //posEnd = pos -1;
                        //joinPC();
                        // posEnd is alreadys set
                        if(!usePC) {
                            posEnd = pos -1;
                            if(posEnd > posStart) {
                                joinPC();
                            } else {
                                usePC = true;
                                pcStart = pcEnd = 0;
                            }
                        }
                        //assert usePC == true;
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    } else if(ch == '\n') {
                        if(!normalizedCR && usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = '\n';
                        }
                        normalizedCR = false;
                    } else {
                        if(usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = ch;
                        }
                        normalizedCR = false;
                    }
                }
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="142">
<file line="1524" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2413" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2806" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
            if(normalizeIgnorableWS) {
                if(ch == '\r') {
                    normalizedCR = true;
                    //posEnd = pos -1;
                    //joinPC();
                    // posEnd is alreadys set
                    if(!usePC) {
                        posEnd = pos -1;
                        if(posEnd > posStart) {
                            joinPC();
                        } else {
                            usePC = true;
                            pcStart = pcEnd = 0;
                        }
                    }
                    //assert usePC == true;
                    if(pcEnd >= pc.length) ensurePC(pcEnd);
                    pc[pcEnd++] = '\n';
                } else if(ch == '\n') {
                    if(!normalizedCR && usePC) {
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    }
                    normalizedCR = false;
                } else {
                    if(usePC) {
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = ch;
                    }
                    normalizedCR = false;
                }
            }

        }
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="141">
<file line="2532" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2806" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
            if(normalizeIgnorableWS) {
                if(ch == '\r') {
                    normalizedCR = true;
                    //posEnd = pos -1;
                    //joinPC();
                    // posEnd is alreadys set
                    if(!usePC) {
                        posEnd = pos -1;
                        if(posEnd > posStart) {
                            joinPC();
                        } else {
                            usePC = true;
                            pcStart = pcEnd = 0;
                        }
                    }
                    //assert usePC == true;
                    if(pcEnd >= pc.length) ensurePC(pcEnd);
                    pc[pcEnd++] = '\n';
                } else if(ch == '\n') {
                    if(!normalizedCR && usePC) {
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    }
                    normalizedCR = false;
                } else {
                    if(usePC) {
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = ch;
                    }
                    normalizedCR = false;
                }
            }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="127">
<file line="2421" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2924" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                            if(posEnd > posStart) {
                                joinPC();
                            } else {
                                usePC = true;
                                pcStart = pcEnd = 0;
                            }
                        }
                        //assert usePC == true;
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    } else if(ch == '\n') {
                        if(!normalizedCR && usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = '\n';
                        }
                        normalizedCR = false;
                    } else {
                        if(usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = ch;
                        }
                        normalizedCR = false;
                    }
                }
            }
        } catch(EOFException ex) {
            // detect EOF and create meaningful error ...
            throw new XmlPullParserException(
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="126">
<file line="1396" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2922" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                        posEnd = pos - 1; // posEnd is alreadys set
                        if(!usePC) {
                            if(posEnd > posStart) {
                                joinPC();
                            } else {
                                usePC = true;
                                pcStart = pcEnd = 0;
                            }
                        }
                        //assert usePC == true;
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    } else if(ch == '\n') {
                        if(!normalizedCR && usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = '\n';
                        }
                        normalizedCR = false;
                    } else {
                        if(usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = ch;
                        }
                        normalizedCR = false;
                    }
                }
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="119">
<file line="134" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/TypeFormat.java"/>
<file line="190" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/TypeFormat.java"/>
<codefragment>
<![CDATA[
            int limit = (isNegative) ? Integer.MIN_VALUE : -Integer.MAX_VALUE;
            int multmin = limit / radix;
            int length = chars.length();
            int i = (isNegative || (chars.charAt(0) == '+')) ? 1 : 0;
            while (true) {
                int digit = Character.digit(chars.charAt(i), radix);
                int tmp = result * radix;
                if ((digit < 0) || (result < multmin) ||
                                   (tmp < limit + digit)) { // Overflow.
                    throw new NumberFormatException(
                        "For input characters: \"" + chars.toString() + "\"");
                }
                // Accumulates negatively to avoid surprises near MAX_VALUE
                result = tmp - digit;
                if (++i >= length) {
                    break;
                }
            }
            return isNegative ? result : -result;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="116">
<file line="1532" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="2924" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                            if(posEnd > posStart) {
                                joinPC();
                            } else {
                                usePC = true;
                                pcStart = pcEnd = 0;
                            }
                        }
                        //assert usePC == true;
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    } else if(ch == '\n') {
                        if(!normalizedCR && usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = '\n';
                        }
                        normalizedCR = false;
                    } else {
                        if(usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = ch;
                        }
                        normalizedCR = false;
                    }
                }
            }
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="115">
<file line="1399" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<file line="1532" path="/home/schulte/Sources/github.com/plexus-utils/src/main/java/org/codehaus/plexus/util/xml/pull/MXParser.java"/>
<codefragment>
<![CDATA[
                            if(posEnd > posStart) {
                                joinPC();
                            } else {
                                usePC = true;
                                pcStart = pcEnd = 0;
                            }
                        }
                        //assert usePC == true;
                        if(pcEnd >= pc.length) ensurePC(pcEnd);
                        pc[pcEnd++] = '\n';
                    } else if(ch == '\n') {
                        if(!normalizedCR && usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = '\n';
                        }
                        normalizedCR = false;
                    } else {
                        if(usePC) {
                            if(pcEnd >= pc.length) ensurePC(pcEnd);
                            pc[pcEnd++] = ch;
                        }
                        normalizedCR = false;
                    }
                }
]]>
</codefragment>
</duplication>
</pmd-cpd>